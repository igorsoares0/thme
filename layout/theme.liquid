<!doctype html>
<html lang="{{ request.locale.iso_code }}">
  <head>
    {% # Google Fonts for Versed brand %}
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">

    {% # Inlined CSS Variables %}
    {% render 'css-variables' %}

    {% # Load and preload the critical CSS %}
    {{ 'critical.css' | asset_url | stylesheet_tag: preload: true }}
    
    {% # Load button color overrides %}
    {{ 'button-overrides.css' | asset_url | stylesheet_tag }}

    {% # Social, title, etc. %}
    {% render 'meta-tags' %}

    {{ content_for_header }}
  </head>

  <body>
    {% sections 'header-group' %}

    {{ content_for_layout }}

    {% sections 'footer-group' %}

    <script>
      // Mobile Menu Functionality
      document.addEventListener('DOMContentLoaded', function() {
        const mobileToggle = document.querySelector('.header__mobile-toggle');
        const mobileNav = document.querySelector('.header__mobile-nav');
        
        if (mobileToggle && mobileNav) {
          mobileToggle.addEventListener('click', function() {
            const isExpanded = mobileToggle.getAttribute('aria-expanded') === 'true';
            
            mobileToggle.setAttribute('aria-expanded', !isExpanded);
            mobileNav.classList.toggle('active');
            
            // Prevent scroll when menu is open
            document.body.style.overflow = !isExpanded ? 'hidden' : '';
          });
          
          // Close menu when clicking on mobile menu links
          const mobileLinks = mobileNav.querySelectorAll('.header__mobile-menu-link');
          mobileLinks.forEach(link => {
            link.addEventListener('click', function() {
              mobileToggle.setAttribute('aria-expanded', 'false');
              mobileNav.classList.remove('active');
              document.body.style.overflow = '';
            });
          });
          
          // Close menu when resizing to desktop
          window.addEventListener('resize', function() {
            if (window.innerWidth > 768) {
              mobileToggle.setAttribute('aria-expanded', 'false');
              mobileNav.classList.remove('active');
              document.body.style.overflow = '';
            }
          });
        }
        
        // Newsletter Form Enhancement
        const newsletterForm = document.querySelector('.footer__newsletter-form');
        if (newsletterForm) {
          newsletterForm.addEventListener('submit', function(e) {
            const submitBtn = newsletterForm.querySelector('.footer__newsletter-submit');
            const originalHTML = submitBtn.innerHTML;
            
            submitBtn.innerHTML = `
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" opacity="0.3"/>
                <path d="M12 2a10 10 0 0 1 10 10" stroke="currentColor" stroke-width="4" stroke-linecap="round" class="spinner"/>
              </svg>
            `;
            submitBtn.disabled = true;
            
            // Add spinner animation
            const spinner = submitBtn.querySelector('.spinner');
            if (spinner) {
              spinner.style.animation = 'spin 1s linear infinite';
            }
            
            // Reset button after 3 seconds (for demo purposes)
            setTimeout(() => {
              submitBtn.innerHTML = originalHTML;
              submitBtn.disabled = false;
            }, 3000);
          });
        }
        
        // Smooth scroll for internal links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
          anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
              target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
              });
            }
          });
        });
        
        // Add scroll effects
        let lastScrollY = window.scrollY;
        const header = document.querySelector('.header');
        
        window.addEventListener('scroll', () => {
          const currentScrollY = window.scrollY;
          
          if (header) {
            if (currentScrollY > 100) {
              header.classList.add('header--scrolled');
            } else {
              header.classList.remove('header--scrolled');
            }
            
            // Hide header on scroll down, show on scroll up
            if (currentScrollY > lastScrollY && currentScrollY > 200) {
              header.style.transform = 'translateY(-100%)';
            } else {
              header.style.transform = 'translateY(0)';
            }
          }
          
          lastScrollY = currentScrollY;
        });
        
        // Product card quick actions
        document.querySelectorAll('.product-card__add-btn').forEach(btn => {
          btn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            const originalHTML = this.innerHTML;
            this.innerHTML = `
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                <path d="M16.667 10H10m0 0H3.333m6.667 0V3.333m0 6.667v6.667" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
              </svg>
            `;
            
            // Submit the form
            const form = this.closest('form');
            if (form) {
              form.submit();
            }
            
            // Reset button after 2 seconds
            setTimeout(() => {
              this.innerHTML = originalHTML;
            }, 2000);
          });
        });
        
        // Add intersection observer for animations
        const observerOptions = {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px'
        };
        
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('animate-in');
            }
          });
        }, observerOptions);
        
        // Observe elements for animation
        document.querySelectorAll('.product-card, .hero__content, .featured-products__header').forEach(el => {
          observer.observe(el);
        });
        
        // Fix review button colors
        function updateReviewButtonColors() {
          const reviewTexts = [
            'Write a Review',
            'Write Review',
            'Submit Review',
            'Add Review',
            'Post Review',
            'Leave Review'
          ];
          
          // Find all buttons and links with review-related text
          document.querySelectorAll('button, a.btn, input[type="submit"]').forEach(button => {
            const text = button.textContent || button.value || '';
            if (reviewTexts.some(reviewText => text.includes(reviewText))) {
              button.classList.remove('btn-primary', 'btn-success');
              button.classList.add('btn--accent');
              button.style.backgroundColor = 'var(--color-sage-green)';
              button.style.borderColor = 'var(--color-sage-green)';
              button.style.color = 'var(--color-pure-white)';
              
              // Add hover effect
              button.addEventListener('mouseenter', function() {
                this.style.backgroundColor = 'var(--color-sage-green-dark)';
                this.style.borderColor = 'var(--color-sage-green-dark)';
              });
              
              button.addEventListener('mouseleave', function() {
                this.style.backgroundColor = 'var(--color-sage-green)';
                this.style.borderColor = 'var(--color-sage-green)';
              });
            }
          });
        }
        
        // Run on page load
        updateReviewButtonColors();
        
        // Run when new content is loaded (for apps that load dynamically)
        const reviewObserver = new MutationObserver(function(mutations) {
          mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
              updateReviewButtonColors();
            }
          });
        });
        
        reviewObserver.observe(document.body, {
          childList: true,
          subtree: true
        });
      });
      
      // CSS for scroll effects
      const scrollStyles = document.createElement('style');
      scrollStyles.textContent = `
        .header {
          transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .header--scrolled {
          box-shadow: var(--shadow-md);
        }
        
        @keyframes spin {
          to { transform: rotate(360deg); }
        }
        
        .animate-in {
          animation: fadeInUp 0.6s ease-out;
        }
        
        @media (prefers-reduced-motion: reduce) {
          .header {
            transition: none;
          }
          
          .animate-in {
            animation: none;
          }
        }
      `;
      document.head.appendChild(scrollStyles);
    </script>
  </body>
</html>
